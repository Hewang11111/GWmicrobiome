setwd("/home/ke36dar/He/one_manu/phyloseq")
st.all <- readRDS("/home/ke36dar/He/one_manu/seqtab.rds")

library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
library(dplyr)
packageVersion("dplyr")

###########################check######################
table(nchar(getSequences(st.all))) #265-488

######fasta export
asv_seqs <- colnames(st.all)
asv_headers <- vector(dim(st.all)[2], mode="character")

for (i in 1:dim(st.all)[2]) {
  asv_headers[i] <- paste(">ASV", i, sep="_")
}
# making and writing out a fasta of our final ASV seqs:
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "ASVs_nocollapse.fasta")

##################################mothur check with bash script##############################
cd /home/ke36dar/He/one_manu/phyloseq/mothur/
conda activate mothur
mothur
align.seqs(fasta=ASVs_nocollapse.fasta, reference=/home/na27six/silva.nr_v138_1.align, flip=t, processors=16)
summary.seqs(fasta=ASVs_nocollapse.align)
screen.seqs(fasta=ASVs_nocollapse.align, summary=ASVs_nocollapse.summary, start=6428, end=23440)
summary.seqs(fasta=ASVs_nocollapse.good.align)
filter.seqs(fasta=ASVs_nocollapse.good.align, vertical=T)
degap.seqs(fasta=ASVs_nocollapse.good.filter.fasta)

conda deactivate
quit()
##############################################reload fasta file from mothur in R###########################
goodone <- readDNAStringSet("mothur/ASVs_nocollapse.good.filter.ng.fasta")
table(width(goodone))#371-488
name <-names(goodone)
sequence <- paste(goodone)
df <- data.frame(name, sequence)

st.all.t2 <- st.all[,colnames(st.all) %in% df$sequence] #all sequences can be aligned via mothur

identical(table(nchar(getSequences(st.all.t2))), table(width(goodone)))
str(st.all.t2) 

##removing chimeric sequences
ptm <- proc.time()
seqtab<- removeBimeraDenovo(st.all.t2, method="consensus",
                            multithread=TRUE, verbose=TRUE)
proc.time() - ptm 

saveRDS(seqtab, "All_seqtab_2023206.rds")

## inspect distribution of sequence length
table(nchar(getSequences(seqtab)))


###assigning taxonomy
ptm <- proc.time()
taxa <- assignTaxonomy(seqtab, "~/He/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
proc.time() - ptm 

saveRDS(taxa, "all_tax_20240206.rds")

###inspection of the taxonomic assignment
taxa.print <- taxa
rownames(taxa.print) <- NULL
head(taxa.print)

df <- data.frame(taxa.print)
write.table(df, "taxonomy_only.txt")

##output for Asvs_taxonomy table
asv_seqs <- colnames(seqtab)
asv_headers <- vector(dim(seqtab)[2], mode="character")

for (i in 1:dim(seqtab)[2]) {
  asv_headers[i] <- paste(">ASV", i, sep="_")
}
# making and writing out a fasta of our final ASV seqs:
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "ASVs_output.fa")

#count table:
asv_tab <- t(seqtab)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab, "ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)

#tax table:
# creating table of taxonomy and setting any that are unclassified as "NA"
asv_tax <- taxa
rownames(asv_tax) <- gsub(pattern=">", replacement="", x=asv_headers)

write.table(asv_tax, "ASVs_taxonomy.tsv", sep="\t", quote=F, col.names=NA)
