setwd(<path>)

asv_tab <- read.table("ASVs_counts.tsv", sep="\t", header=TRUE)
asv_tax <- read.table("ASVs_taxonomy.tsv", sep="\t", header=TRUE)
meta <- read.csv("meta.csv")

library("phyloseq") #1.42.0
#packageVersion("phyloseq")
library("ggplot2"); packageVersion("ggplot2")#3.4.4
library(vegan)#2.6-4
library(dplyr)#1.1.4
library(grid)#4.2.2
library(reshape2)#1.4.4
library(Biostrings)#2.66.0
library(stringr)#1.5.1

###check identicial
identical(rownames(meta), colnames(asv_tab))
identical(rownames(asv_tab), rownames(asv_tax))

###remove Eukaryota
asv_tax1 <- asv_tax %>%
  filter(Kingdom %in% c("Bacteria")) 
  
badTaxa <- subset(asv_tax1, Order=="Chloroplast"|Family=="Mitochondria")

asv_tax <- asv_tax1 %>%
  anti_join(badTaxa)

rm(badTaxa, asv_tax1)

asv_tab1 <- asv_tab %>%
  filter(rownames(asv_tab) %in% rownames(asv_tax))

asv_tab <- asv_tab1
rm(asv_tab1)

###check identicial
identical(rownames(asv_tab), rownames(asv_tax))
identical(rownames(meta), colnames(asv_tab))

###check if reads are higher than 1000 and if 0 reads taxa exists
which(rowSums(asv_tab)==0)
which(colSums(asv_tab)<1000)

data <- phyloseq(otu_table(as.matrix(asv_tab), taxa_are_rows = TRUE), sample_data(meta), tax_table(as.matrix(asv_tax)))
save(data, file="all_data.phyloseq")

################################# tree ######################
###extract fasta in R
fasta <- readDNAStringSet("<path>/ASVs_output.fa")
fasta1 <- fasta[names(fasta)%in%rownames(tax_table(data)),]
seq <- paste(fasta1)

asv_fasta <- c(rbind(paste0(">",names(fasta1)), seq))
write(asv_fasta, "all_data.fasta")

###alignment using bash
cd <path>
conda activate muscle
muscle -super5 all_data.fasta -output ASVs_alignment.fasta

###automated alignment trimming using bash
conda activate trimAl
trimal -in ASVs_alignment.fasta -out after_trim_noallgaps.fasta -htmlout after_trim_noallgaps.html -fasta -noallgaps

###tree building using bash
conda activate fastTree
FastTree -nt after_trim_noallgaps.fasta > 20240318.tre

###melting into phyloseq in R
library(ape)
phylo_tree <- ape::read.tree(file="<path>/20240318.tre")
ape::is.rooted(phylo_tree)

phylo_tree_trim <- ape::keep.tip(phylo_tree, tip = taxa_names(data))

identical(phylo_tree, phylo_tree_trim)
plot(phylo_tree_trim)
###reorder asv_tab and asv_tax
asv_tab <- data.frame(otu_table(data))
asv_tax <- data.frame(tax_table(data))
meta <- data.frame(sample_data(data))

asv_tab1 <- asv_tab[phylo_tree_trim$tip.label,]
asv_tax1 <- asv_tax[phylo_tree_trim$tip.label,]
meta <- meta[colnames(asv_tab1),]

identical(rownames(asv_tab1), phylo_tree_trim$tip.label)
identical(rownames(asv_tax1), phylo_tree_trim$tip.label)
identical(colnames(asv_tab1), rownames(meta))
identical(rownames(asv_tab), rownames(asv_tab))
rm(asv_tab, asv_tax)

data <- phyloseq(otu_table(as.matrix(asv_tab1), taxa_are_rows = TRUE), sample_data(meta), tax_table(as.matrix(asv_tax1)), phylo_tree_trim)
save(data, file="alldata_tree.phyloseq")

###build root for the tree
library(iCAMP)

save.wd <- <path>
setwd(save.wd)

tree <- phy_tree(data)

if(!file.exists("pd.desc")) 
{
  pd.big=iCAMP::pdist.big(tree = tree, wd=save.wd, nworker = nworker, memory.G = memory.G)
  # output files:
  # path.rda: a R object to list all the nodes and  edge lengthes from root to every tip. saved in R data format. an intermediate output when claculating phylogenetic distance matrix.
  # pd.bin: BIN file (backingfile) generated by function big.matrix in R package bigmemory. This is the big matrix storing pairwise phylogenetic distance values. By using this bigmemory format file, we will not need memory but hard disk when calling big matrix for calculation.
  # pd.desc: the DESC file (descriptorfile) to hold the backingfile (pd.bin) description.
  # pd.taxon.name.csv: comma delimited csv file storing the IDs of tree tips (OTUs), serving as the row/column names of the big phylogenetic distance matrix.
}else{
  # if you already calculated the phylogenetic distance matrix in a previous run
  pd.big=list()
  pd.big$tip.label=read.csv(paste0(save.wd,"/pd.taxon.name.csv"),row.names = 1,stringsAsFactors = FALSE)[,1]
  pd.big$pd.wd=save.wd
  pd.big$pd.file="pd.desc"
  pd.big$pd.name.file="pd.taxon.name.csv"
}

root_tree <- midpoint.root.big(tree, pd.spname = pd.big$tip.label, pd.wd=pd.big$pd.wd, pd.desc = pd.big$pd.file)
ape::is.rooted(root_tree$tree)

data_root <- data
phy_tree(data_root) <- root_tree$tree
ape::is.rooted(phy_tree(data_root))
save(data_root, file="all_root.phyloseq")
